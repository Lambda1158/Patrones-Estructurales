package org.example.bridge;

// ===== EJERCICIO 2 - BRIDGE =====
// Patr√≥n Bridge: Separa la abstracci√≥n de la implementaci√≥n
// para que ambas puedan variar independientemente.

// Implementaci√≥n: Canales de env√≠o
interface CanalEnvio {
    void enviar(String mensaje, String destinatario);
}

class Email implements CanalEnvio {
    @Override
    public void enviar(String mensaje, String destinatario) {
        System.out.println("üìß Email enviado a " + destinatario + ": " + mensaje);
    }
}

class SMS implements CanalEnvio {
    @Override
    public void enviar(String mensaje, String destinatario) {
        System.out.println("üì± SMS enviado a " + destinatario + ": " + mensaje);
    }
}

// Abstracci√≥n: Tipos de notificaci√≥n
abstract class Notificacion {
    protected CanalEnvio canal; // Bridge - conexi√≥n con la implementaci√≥n

    public Notificacion(CanalEnvio canal) {
        this.canal = canal;
    }

    public abstract void notificar(String destinatario);
}

class Alerta extends Notificacion {
    public Alerta(CanalEnvio canal) {
        super(canal);
    }

    @Override
    public void notificar(String destinatario) {
        canal.enviar("‚ö†Ô∏è ALERTA: Situaci√≥n que requiere atenci√≥n inmediata", destinatario);
    }
}

class Recordatorio extends Notificacion {
    public Recordatorio(CanalEnvio canal) {
        super(canal);
    }

    @Override
    public void notificar(String destinatario) {
        canal.enviar("‚è∞ RECORDATORIO: No olvides tu cita pendiente", destinatario);
    }
}

class Promocion extends Notificacion {
    public Promocion(CanalEnvio canal) {
        super(canal);
    }

    @Override
    public void notificar(String destinatario) {
        canal.enviar("üéâ PROMOCI√ìN: ¬°Ofertas especiales disponibles!", destinatario);
    }
}